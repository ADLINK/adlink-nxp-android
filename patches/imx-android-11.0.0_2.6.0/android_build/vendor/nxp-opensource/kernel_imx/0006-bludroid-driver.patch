diff --git a/drivers/bluetooth/mbtex_8997/bt/bt_drv.h b/drivers/bluetooth/mbtex_8997/bt/bt_drv.h
index fa53cc3306be..8ab7cbf5bbe0 100755
--- a/drivers/bluetooth/mbtex_8997/bt/bt_drv.h
+++ b/drivers/bluetooth/mbtex_8997/bt/bt_drv.h
@@ -36,6 +36,7 @@
 
 /** MAX adapter BT driver supported */
 #define MAX_BT_ADAPTER    3
+#define ADLINK_BLUEDROID_BT 1
 
 #ifndef BIT
 /** BIT definition */
@@ -59,7 +60,7 @@ typedef u32 t_ptr;
 #define DEV_FEATURE_BLE     BIT(2)
 
 /** Define maximum number of radio func supported */
-#define MAX_RADIO_FUNC     3
+#define MAX_RADIO_FUNC     5
 
 /** MAC address print format */
 #ifndef MACSTR
@@ -98,6 +99,8 @@ typedef u32 t_ptr;
 /** Debug level : Informative */
 #define DBG_INFO		BIT(30)
 
+#define DEBUG_LEVEL1  1
+
 #ifdef	DEBUG_LEVEL1
 extern u32 mbt_drvdbg;
 
@@ -481,6 +484,8 @@ typedef struct _bt_adapter {
 
 	/** Pointer of fw dump file name */
 	char *fwdump_fname;
+	/** Fw dump queue */
+	struct sk_buff_head fwdump_queue;
 	/** Pending Tx packet queue */
 	struct sk_buff_head pending_queue;
 	/** tx lock flag */
@@ -614,6 +619,8 @@ typedef struct _bt_private {
 	ulong driver_flags;
 	/** Driver reference flags */
 	struct kobject kobj;
+	int debug_device_pending;
+	int debug_ocf_ogf[2];
 	u8 fw_reload;
 	/* hist_data_len */
 	u8 hist_data_len;
diff --git a/drivers/bluetooth/mbtex_8997/bt/bt_main.c b/drivers/bluetooth/mbtex_8997/bt/bt_main.c
index 45a4ecccd7ef..f9cc24692a39 100755
--- a/drivers/bluetooth/mbtex_8997/bt/bt_main.c
+++ b/drivers/bluetooth/mbtex_8997/bt/bt_main.c
@@ -72,6 +72,8 @@ static char fw_version[32] = "0.0.0.p0";
 static struct class *chardev_class;
 
 /** Interface specific variables */
+static int mbtchar_minor;
+static int debugchar_minor;
 
 /**
  * The global variable of a pointer to bt_private
@@ -82,6 +84,11 @@ bt_private *m_priv[MAX_BT_ADAPTER];
 /** Default Driver mode */
 static int drv_mode = (DRV_MODE_BT);
 
+/** BT interface name */
+static char *bt_name;
+/** BT debug interface name */
+static char *debug_name;
+
 /** fw reload flag */
 int bt_fw_reload;
 /** fw serial download flag */
@@ -124,6 +131,8 @@ static int dts_enable = 1;
 int mbt_pm_keep_power = 1;
 #endif
 
+static int debug_intf = 1;
+
 static int btpmic = 0;
 
 /** Offset of sequence number in event */
@@ -139,6 +148,19 @@ static int btpmic = 0;
 void
 bt_recv_frame(bt_private *priv, struct sk_buff *skb)
 {
+#ifdef ADLINK_BLUEDROID_BT
+	struct mbt_dev *mbt_dev = NULL;
+	struct m_dev *mdev_bt = &(priv->bt_dev.m_dev[BT_SEQ]);
+	if (priv->bt_dev.m_dev[BT_SEQ].spec_type != BLUEZ_SPEC)
+		mbt_dev =
+			(struct mbt_dev *)priv->bt_dev.m_dev[BT_SEQ].
+			dev_pointer;
+	if (mbt_dev) {
+		skb->dev = (void *)mdev_bt;
+		mdev_recv_frame(skb);
+		mdev_bt->stat.byte_rx += skb->len;
+	}
+#else	
 	struct hci_dev *hdev = NULL;
 	if (priv->bt_dev.m_dev[BT_SEQ].spec_type == BLUEZ_SPEC)
 		hdev = (struct hci_dev *)priv->bt_dev.m_dev[BT_SEQ].dev_pointer;
@@ -151,6 +173,7 @@ bt_recv_frame(bt_private *priv, struct sk_buff *skb)
 		hci_recv_frame(hdev, skb);
 #endif
 	}
+#endif	
 	return;
 }
 
@@ -175,6 +198,27 @@ alloc_mbt_dev(void)
 	return mbt_dev;
 }
 
+/**
+ *  @brief Alloc debug device
+ *
+ *  @return    pointer to structure debug_level or NULL
+ */
+struct debug_dev *
+alloc_debug_dev(void)
+{
+	struct debug_dev *debug_dev;
+	ENTER();
+
+	debug_dev = kzalloc(sizeof(struct debug_dev), GFP_KERNEL);
+	if (!debug_dev) {
+		LEAVE();
+		return NULL;
+	}
+
+	LEAVE();
+	return debug_dev;
+}
+
 /**
  *  @brief Frees m_dev
  *
@@ -198,21 +242,38 @@ void
 clean_up_m_devs(bt_private *priv)
 {
 	struct m_dev *m_dev = NULL;
-	struct hci_dev *hdev = NULL;
+	int i;
 
 	ENTER();
 	if (priv->bt_dev.m_dev[BT_SEQ].dev_pointer) {
 		m_dev = &(priv->bt_dev.m_dev[BT_SEQ]);
 		PRINTM(MSG, "BT: Delete %s\n", m_dev->name);
-		if (m_dev->spec_type == BLUEZ_SPEC) {
-			hdev = (struct hci_dev *)m_dev->dev_pointer;
-			/** check if dev->name has been assigned */
-			if (strstr(hdev->name, "hci"))
-				hci_unregister_dev(hdev);
-			hci_free_dev(hdev);
+		if (m_dev->spec_type == IANYWHERE_SPEC) {
+			if ((drv_mode & DRV_MODE_BT) && (mbtchar_minor > 0))
+				mbtchar_minor--;
+			m_dev->close(m_dev);
+			for (i = 0; i < 3; i++)
+				kfree_skb(((struct mbt_dev *)
+					   (m_dev->dev_pointer))->
+					  reassembly[i]);
+			/**  unregister m_dev to char_dev */
+			if (chardev_class)
+				chardev_cleanup_one(m_dev, chardev_class);
+			free_m_dev(m_dev);
 		}
 		priv->bt_dev.m_dev[BT_SEQ].dev_pointer = NULL;
 	}
+	if (priv->bt_dev.m_dev[DEBUG_SEQ].dev_pointer) {
+		m_dev = &(priv->bt_dev.m_dev[DEBUG_SEQ]);
+		PRINTM(MSG, "BT: Delete %s\n", m_dev->name);
+		if ((debug_intf) && (debugchar_minor > 0))
+			debugchar_minor--;
+		/** unregister m_dev to char_dev */
+		if (chardev_class)
+			chardev_cleanup_one(m_dev, chardev_class);
+		free_m_dev(m_dev);
+		priv->bt_dev.m_dev[DEBUG_SEQ].dev_pointer = NULL;
+	}
 	LEAVE();
 	return;
 }
@@ -2298,6 +2359,7 @@ bt_init_adapter(bt_private *priv)
 	bt_init_from_dev_tree();
 #endif
 	skb_queue_head_init(&priv->adapter->tx_queue);
+	skb_queue_head_init(&priv->adapter->fwdump_queue);
 	skb_queue_head_init(&priv->adapter->pending_queue);
 	priv->adapter->tx_lock = FALSE;
 	priv->adapter->ps_state = PS_AWAKE;
@@ -2477,6 +2539,7 @@ bt_free_adapter(bt_private *priv)
 	bt_adapter *adapter = priv->adapter;
 	ENTER();
 	skb_queue_purge(&priv->adapter->tx_queue);
+	skb_queue_purge(&priv->adapter->fwdump_queue);
 	kfree(adapter->tx_buffer);
 	kfree(adapter->hw_regs_buf);
 	/* Free allocated memory for fwdump filename */
@@ -2757,6 +2820,7 @@ mdev_flush(struct m_dev *m_dev)
 static int
 bt_close(struct hci_dev *hdev)
 {
+#ifndef ADLINK_BLUEDROID_BT
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 4, 0)
 	bt_private *priv = (bt_private *)hci_get_drvdata(hdev);
 #else
@@ -2774,6 +2838,7 @@ bt_close(struct hci_dev *hdev)
 
 	module_put(THIS_MODULE);
 	LEAVE();
+#endif	
 	return BT_STATUS_SUCCESS;
 }
 
@@ -2978,6 +3043,14 @@ bt_service_main_thread(void *data)
 					send_single_packet(priv, skb);
 			}
 		}
+		if (!skb_queue_empty(&priv->adapter->fwdump_queue)) {
+			skb = skb_dequeue(&priv->adapter->fwdump_queue);
+			if (skb) {
+				bt_store_firmware_dump(priv, skb->data,
+						       skb->len);
+				dev_kfree_skb_any(skb);
+			}
+		}
 	}
 	bt_deactivate_thread(thread);
 	LEAVE();
@@ -3013,6 +3086,33 @@ bt_interrupt(struct m_dev *m_dev)
 	LEAVE();
 }
 
+static void
+char_dev_release_dynamic(struct kobject *kobj)
+{
+	struct char_dev *cdev = container_of(kobj, struct char_dev, kobj);
+	ENTER();
+	PRINTM(INFO, "free char_dev\n");
+	kfree(cdev);
+	LEAVE();
+}
+
+static struct kobj_type ktype_char_dev_dynamic = {
+	.release = char_dev_release_dynamic,
+};
+
+static struct char_dev *
+alloc_char_dev(void)
+{
+	struct char_dev *cdev;
+	ENTER();
+	cdev = kzalloc(sizeof(struct char_dev), GFP_KERNEL);
+	if (cdev) {
+		kobject_init(&cdev->kobj, &ktype_char_dev_dynamic);
+		PRINTM(INFO, "alloc char_dev\n");
+	}
+	return cdev;
+}
+
 /**
  * @brief  Dynamic release of bt private
  *
@@ -3246,7 +3346,15 @@ int
 sbi_register_conf_dpc(bt_private *priv)
 {
 	int ret = BT_STATUS_SUCCESS;
+#ifdef ADLINK_BLUEDROID_BT	
+	struct mbt_dev *mbt_dev = NULL;
+	struct debug_dev *debug_dev = NULL;
+	int i = 0;
+	struct char_dev *char_dev = NULL;
+	char dev_file[DEV_NAME_LEN + 5];
+#else	
 	struct hci_dev *hdev = NULL;
+#endif
 	unsigned char dev_type = 0;
 
 	ENTER();
@@ -3257,7 +3365,22 @@ sbi_register_conf_dpc(bt_private *priv)
 		LEAVE();
 		return ret;
 	}
-
+#ifdef ADLINK_BLUEDROID_BT
+	if (drv_mode & DRV_MODE_BT) {
+		mbt_dev = alloc_mbt_dev();
+		if (!mbt_dev) {
+			PRINTM(FATAL, "Can not allocate mbt dev\n");
+			ret = -ENOMEM;
+			goto err_kmalloc;
+		}
+		init_m_dev(&(priv->bt_dev.m_dev[BT_SEQ]));
+		priv->bt_dev.m_dev[BT_SEQ].dev_type = BT_TYPE;
+		priv->bt_dev.m_dev[BT_SEQ].spec_type = IANYWHERE_SPEC;
+		priv->bt_dev.m_dev[BT_SEQ].dev_pointer = (void *)mbt_dev;
+		priv->bt_dev.m_dev[BT_SEQ].driver_data = priv;
+		priv->bt_dev.m_dev[BT_SEQ].read_continue_flag = 0;
+	}
+#else	
 	if (drv_mode & DRV_MODE_BT) {
 		hdev = hci_alloc_dev();
 		if (!hdev) {
@@ -3290,9 +3413,13 @@ sbi_register_conf_dpc(bt_private *priv)
 		priv->bt_dev.m_dev[BT_SEQ].dev_pointer = (void *)hdev;
 		priv->bt_dev.m_dev[BT_SEQ].driver_data = priv;
 	}
-
+#endif
 	dev_type = HCI_SDIO;
 
+#ifdef ADLINK_BLUEDROID_BT
+	if (mbt_dev)
+		mbt_dev->type = dev_type;
+#else
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 34)
 	if (hdev)
 		hdev->bus = dev_type;
@@ -3300,13 +3427,20 @@ sbi_register_conf_dpc(bt_private *priv)
 	if (hdev)
 		hdev->type = dev_type;
 #endif /* >= 2.6.34 */
-
+#endif
 	ret = bt_init_cmd(priv);
 	if (ret < 0) {
 		PRINTM(FATAL, "BT init command failed!\n");
 		goto done;
 	}
 
+#ifdef ADLINK_BLUEDROID_BT
+	if (mbt_dev && priv->bt_dev.devType == DEV_TYPE_AMP) {
+		mbt_dev->type |= HCI_BT_AMP;
+		priv->bt_dev.m_dev[BT_SEQ].dev_type = BT_AMP_TYPE;
+	}
+#endif
+	
 	/** Process device tree init parameters before register hci device.
 	 *  Since uplayer device has not yet registered, no need to block tx queue.
 	 * */
@@ -3354,7 +3488,116 @@ sbi_register_conf_dpc(bt_private *priv)
 	bt_get_fw_version(priv);
 	snprintf((char *)priv->adapter->drv_ver, MAX_VER_STR_LEN,
 		 mbt_driver_version, fw_version);
+#ifdef ADLINK_BLUEDROID_BT
+	if (mbt_dev) {
+		/** init mbt_dev */
+		mbt_dev->flags = 0;
+		mbt_dev->pkt_type = (HCI_DM1 | HCI_DH1 | HCI_HV1);
+		mbt_dev->esco_type = (ESCO_HV1);
+		mbt_dev->link_mode = (HCI_LM_ACCEPT);
+
+		mbt_dev->idle_timeout = 0;
+		mbt_dev->sniff_max_interval = 800;
+		mbt_dev->sniff_min_interval = 80;
+		for (i = 0; i < 3; i++)
+			mbt_dev->reassembly[i] = NULL;
+		atomic_set(&mbt_dev->promisc, 0);
+
+		/** alloc char dev node */
+		char_dev = alloc_char_dev();
+		if (!char_dev) {
+			class_destroy(chardev_class);
+			ret = -ENOMEM;
+			goto err_kmalloc;
+		}
+		char_dev->minor = MBTCHAR_MINOR_BASE + mbtchar_minor;
+		if (mbt_dev->type & HCI_BT_AMP)
+			char_dev->dev_type = BT_AMP_TYPE;
+		else
+			char_dev->dev_type = BT_TYPE;
+
+		if (bt_name)
+			snprintf(mbt_dev->name, sizeof(mbt_dev->name), "%s%d",
+				 bt_name, mbtchar_minor);
+		else
+			snprintf(mbt_dev->name, sizeof(mbt_dev->name),
+				 "mbtchar%d", mbtchar_minor);
+		snprintf(dev_file, sizeof(dev_file), "/dev/%s", mbt_dev->name);
+		mbtchar_minor++;
+		PRINTM(MSG, "BT: Create %s\n", dev_file);
+
+		/** register m_dev to BT char device */
+		priv->bt_dev.m_dev[BT_SEQ].index = char_dev->minor;
+		char_dev->m_dev = &(priv->bt_dev.m_dev[BT_SEQ]);
+
+		/** create BT char device node */
+		register_char_dev(char_dev, chardev_class, MODULE_NAME,
+				  mbt_dev->name);
+
+		/** chmod & chown for BT char device */
+		mbtchar_chown(dev_file, AID_SYSTEM, AID_NET_BT_STACK);
+		mbtchar_chmod(dev_file, 0660);
+
+		/** create proc device */
+		snprintf(priv->bt_dev.m_dev[BT_SEQ].name,
+			 sizeof(priv->bt_dev.m_dev[BT_SEQ].name),
+			 mbt_dev->name);
+		bt_proc_init(priv, &(priv->bt_dev.m_dev[BT_SEQ]), BT_SEQ);
+	}
+
+	if ((debug_intf) && ((drv_mode & DRV_MODE_BT)
+	    )) {
+		/** alloc debug_dev */
+		debug_dev = alloc_debug_dev();
+		if (!debug_dev) {
+			PRINTM(FATAL, "Can not allocate debug dev\n");
+			ret = -ENOMEM;
+			goto err_kmalloc;
+		}
 
+		/** init m_dev */
+		init_m_dev(&(priv->bt_dev.m_dev[DEBUG_SEQ]));
+		priv->bt_dev.m_dev[DEBUG_SEQ].dev_type = DEBUG_TYPE;
+		priv->bt_dev.m_dev[DEBUG_SEQ].spec_type = GENERIC_SPEC;
+		priv->bt_dev.m_dev[DEBUG_SEQ].dev_pointer = (void *)debug_dev;
+		priv->bt_dev.m_dev[DEBUG_SEQ].driver_data = priv;
+
+		/** create char device for Debug */
+		char_dev = alloc_char_dev();
+		if (!char_dev) {
+			class_destroy(chardev_class);
+			ret = -ENOMEM;
+			goto err_kmalloc;
+		}
+		char_dev->minor = DEBUGCHAR_MINOR_BASE + debugchar_minor;
+		char_dev->dev_type = DEBUG_TYPE;
+		if (debug_name)
+			snprintf(debug_dev->name, sizeof(debug_dev->name),
+				 "%s%d", debug_name, debugchar_minor);
+		else
+			snprintf(debug_dev->name, sizeof(debug_dev->name),
+				 "mdebugchar%d", debugchar_minor);
+		snprintf(dev_file, sizeof(dev_file), "/dev/%s",
+			 debug_dev->name);
+		PRINTM(MSG, "BT: Create %s\n", dev_file);
+		debugchar_minor++;
+
+		/** register char dev */
+		priv->bt_dev.m_dev[DEBUG_SEQ].index = char_dev->minor;
+		char_dev->m_dev = &(priv->bt_dev.m_dev[DEBUG_SEQ]);
+		register_char_dev(char_dev, chardev_class, MODULE_NAME,
+				  debug_dev->name);
+
+		/** chmod for debug char device */
+		mbtchar_chmod(dev_file, 0666);
+
+		/** create proc device */
+		snprintf(priv->bt_dev.m_dev[DEBUG_SEQ].name,
+			 sizeof(priv->bt_dev.m_dev[DEBUG_SEQ].name),
+			 debug_dev->name);
+		bt_proc_init(priv, &(priv->bt_dev.m_dev[DEBUG_SEQ]), DEBUG_SEQ);
+	}
+#else
 	if (hdev) {
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 34)
 		hdev->dev_type = priv->bt_dev.devType;
@@ -3369,7 +3612,7 @@ sbi_register_conf_dpc(bt_private *priv)
 			 sizeof(priv->bt_dev.m_dev[BT_SEQ].name), hdev->name);
 		bt_proc_init(priv, &(priv->bt_dev.m_dev[BT_SEQ]), BT_SEQ);
 	}
-
+#endif
 done:
 	LEAVE();
 	return ret;
@@ -3505,14 +3748,26 @@ void
 bt_send_hw_remove_event(bt_private *priv)
 {
 	struct sk_buff *skb = NULL;
+#ifdef ADLINK_BLUEDROID_BT	
+	struct mbt_dev *mbt_dev = NULL;
+	struct m_dev *mdev_bt = &(priv->bt_dev.m_dev[BT_SEQ]);	
+#else	
 	struct hci_dev *hdev = NULL;
+#endif
 	ENTER();
 	if (!priv->bt_dev.m_dev[BT_SEQ].dev_pointer) {
 		LEAVE();
 		return;
 	}
+#ifdef ADLINK_BLUEDROID_BT	
+	if (priv->bt_dev.m_dev[BT_SEQ].spec_type != BLUEZ_SPEC)
+		mbt_dev =
+			(struct mbt_dev *)priv->bt_dev.m_dev[BT_SEQ].
+			dev_pointer;
+#else				
 	if (priv->bt_dev.m_dev[BT_SEQ].spec_type == BLUEZ_SPEC)
 		hdev = (struct hci_dev *)priv->bt_dev.m_dev[BT_SEQ].dev_pointer;
+#endif
 #define HCI_HARDWARE_ERROR_EVT  0x10
 #define HCI_HARDWARE_REMOVE     0x24
 	skb = bt_skb_alloc(3, GFP_ATOMIC);
@@ -3521,6 +3776,22 @@ bt_send_hw_remove_event(bt_private *priv)
 	skb->data[2] = HCI_HARDWARE_REMOVE;
 	bt_cb(skb)->pkt_type = HCI_EVENT_PKT;
 	skb_put(skb, 3);
+#ifdef ADLINK_BLUEDROID_BT	
+	if (mbt_dev) {
+		skb->dev = (void *)mdev_bt;
+		PRINTM(MSG, "Send HW ERROR event\n");
+		if (!mdev_recv_frame(skb)) {
+#define RX_WAIT_TIMEOUT				300
+			mdev_bt->wait_rx_complete = TRUE;
+			mdev_bt->rx_complete_flag = FALSE;
+			if (os_wait_interruptible_timeout
+			    (mdev_bt->rx_wait_q, mdev_bt->rx_complete_flag,
+			     RX_WAIT_TIMEOUT))
+				PRINTM(MSG, "BT stack received the event\n");
+			mdev_bt->stat.byte_rx += 3;
+		}
+	}
+#else		
 	if (hdev) {
 		skb->dev = (void *)hdev;
 		PRINTM(MSG, "Send HW ERROR event\n");
@@ -3532,6 +3803,7 @@ bt_send_hw_remove_event(bt_private *priv)
 		os_sched_timeout(5);
 		hdev->stat.byte_rx += 3;
 	}
+#endif	
 	LEAVE();
 	return;
 }
@@ -3692,6 +3964,13 @@ module_param(init_cmds, charp, 0);
 MODULE_PARM_DESC(init_cmds, "BT init commands file name");
 module_param(drv_mode, int, 0);
 MODULE_PARM_DESC(drv_mode, "Bit 0: BT/AMP/BLE;");
+module_param(bt_name, charp, 0);
+MODULE_PARM_DESC(bt_name, "BT interface name");
+module_param(debug_intf, int, 0);
+MODULE_PARM_DESC(debug_intf,
+		 "1: Enable debug interface; 0: Disable debug interface ");
+module_param(debug_name, charp, 0);
+MODULE_PARM_DESC(debug_name, "Debug interface name");
 module_param(bt_fw_reload, int, 0);
 MODULE_PARM_DESC(bt_fw_reload,
 		 "0: disable fw_reload; 1: enable fw reload feature");
diff --git a/drivers/bluetooth/mbtex_8997/bt/bt_sdiommc.c b/drivers/bluetooth/mbtex_8997/bt/bt_sdiommc.c
index 012af3771953..037ebf7f86a3 100755
--- a/drivers/bluetooth/mbtex_8997/bt/bt_sdiommc.c
+++ b/drivers/bluetooth/mbtex_8997/bt/bt_sdiommc.c
@@ -894,13 +894,28 @@ sd_card_to_host(bt_private *priv)
 	struct sk_buff *skb = NULL;
 	u32 type;
 	u8 *payload = NULL;
+#ifdef ADLINK_BLUEDROID_BT	
+	struct mbt_dev *mbt_dev = NULL;
+	struct m_dev *mdev_bt = &(priv->bt_dev.m_dev[BT_SEQ]);
+	struct m_dev *mdev_debug = &(priv->bt_dev.m_dev[DEBUG_SEQ]);
+	struct debug_dev *debug_dev =
+		(struct debug_dev *)priv->bt_dev.m_dev[DEBUG_SEQ].dev_pointer;	
+#else		
 	struct hci_dev *hdev = NULL;
+#endif
 	struct sdio_mmc_card *card = priv->bt_dev.card;
 	int i = 0;
 
 	ENTER();
+#ifdef ADLINK_BLUEDROID_BT	
+	if (priv->bt_dev.m_dev[BT_SEQ].spec_type != BLUEZ_SPEC)
+		mbt_dev =
+			(struct mbt_dev *)priv->bt_dev.m_dev[BT_SEQ].
+			dev_pointer;
+#else				
 	if (priv->bt_dev.m_dev[BT_SEQ].spec_type == BLUEZ_SPEC)
 		hdev = (struct hci_dev *)priv->bt_dev.m_dev[BT_SEQ].dev_pointer;
+#endif
 	if (!card || !card->func) {
 		PRINTM(ERROR, "BT: card or function is NULL!\n");
 		ret = BT_STATUS_FAILURE;
@@ -976,8 +991,13 @@ sd_card_to_host(bt_private *priv)
 	buf_len = payload[0];
 	buf_len |= (u16) payload[1] << 8;
 	type = payload[3];
+#ifdef ADLINK_BLUEDROID_BT	
+	PRINTM(DATA, "BT: SDIO Blk Rd %s: len=%d type=%d\n", mbt_dev->name,
+	       buf_len, type);
+#else		   	
 	PRINTM(DATA, "BT: SDIO Blk Rd %s: len=%d type=%d\n", hdev->name,
 	       buf_len, type);
+#endif		   
 	if (buf_len > buf_block_len * blksz) {
 		PRINTM(ERROR,
 		       "BT: Drop invalid rx pkt, len in hdr=%d, cmd53 length=%d\n",
@@ -1016,6 +1036,22 @@ sd_card_to_host(bt_private *priv)
 		switch (skb->data[0]) {
 		case 0x0E:
 			/** cmd complete */
+			if (priv->debug_device_pending) {
+				if (priv->debug_ocf_ogf[0] == skb->data[3] &&
+				    priv->debug_ocf_ogf[1] == skb->data[4]) {
+					priv->debug_device_pending = 0;
+					priv->debug_ocf_ogf[0] = 0;
+					priv->debug_ocf_ogf[1] = 0;
+					/** debug cmd complete */
+					if (debug_dev) {
+						skb->dev = (void *)mdev_debug;
+						mdev_recv_frame(skb);
+						mdev_debug->stat.byte_rx +=
+							buf_len;
+					}
+					break;
+				}
+			}
 			bt_recv_frame(priv, skb);
 			break;
 		case 0x0F:
@@ -1049,8 +1085,10 @@ sd_card_to_host(bt_private *priv)
 	}
 exit:
 	if (ret) {
+#ifndef ADLINK_BLUEDROID_BT		
 		if (hdev)
 			hdev->stat.err_rx++;
+#endif		
 		PRINTM(ERROR, "error when recv pkt!\n");
 	}
 
@@ -1198,8 +1236,9 @@ bt_sdio_suspend(struct device *dev)
 	bt_private *priv = NULL;
 	struct sdio_mmc_card *cardp;
 	struct m_dev *m_dev = NULL;
+#ifndef ADLINK_BLUEDROID_BT	
 	struct hci_dev *hcidev;
-
+#endif
 	ENTER();
 
 	pm_flags = sdio_get_host_pm_caps(func);
@@ -1222,8 +1261,12 @@ bt_sdio_suspend(struct device *dev)
 
 	m_dev = &(priv->bt_dev.m_dev[BT_SEQ]);
 	PRINTM(CMD, "BT %s: SDIO suspend\n", m_dev->name);
+#ifdef ADLINK_BLUEDROID_BT	
+	mbt_hci_suspend_dev(m_dev);
+#else	
 	hcidev = (struct hci_dev *)m_dev->dev_pointer;
 	hci_suspend_dev(hcidev);
+#endif	
 	skb_queue_purge(&priv->adapter->tx_queue);
 
 	if ((mbt_pm_keep_power) && (priv->adapter->hs_state != HS_ACTIVATED)) {
@@ -1315,7 +1358,9 @@ bt_sdio_resume(struct device *dev)
 	bt_private *priv = NULL;
 	struct sdio_mmc_card *cardp;
 	struct m_dev *m_dev = NULL;
+#ifndef ADLINK_BLUEDROID_BT	
 	struct hci_dev *hcidev;
+#endif
 
 	ENTER();
 	pm_flags = sdio_get_host_pm_caps(func);
@@ -1335,8 +1380,12 @@ bt_sdio_resume(struct device *dev)
 #endif
 	m_dev = &(priv->bt_dev.m_dev[BT_SEQ]);
 	PRINTM(CMD, "BT %s: SDIO resume\n", m_dev->name);
+#ifdef ADLINK_BLUEDROID_BT	
+	mbt_hci_resume_dev(m_dev);
+#else	
 	hcidev = (struct hci_dev *)m_dev->dev_pointer;
 	hci_resume_dev(hcidev);
+#endif	
 	sbi_wakeup_firmware(priv);
 	priv->adapter->hs_state = HS_DEACTIVATED;
 	PRINTM(CMD, "BT:%s: HS DEACTIVATED in Resume!\n", m_dev->name);
diff --git a/drivers/bluetooth/mbtex_8997/bt/hci_wrapper.h b/drivers/bluetooth/mbtex_8997/bt/hci_wrapper.h
index dd3c61817b5c..150a09ec03a8 100755
--- a/drivers/bluetooth/mbtex_8997/bt/hci_wrapper.h
+++ b/drivers/bluetooth/mbtex_8997/bt/hci_wrapper.h
@@ -28,10 +28,12 @@
 
 /**  Define Seq num */
 #define BT_SEQ      0
+#define DEBUG_SEQ   3
 
 /** Define dev type */
 #define BT_TYPE     1
 #define BT_AMP_TYPE 2
+#define DEBUG_TYPE  5
 
 /** Define spec type */
 #define BLUEZ_SPEC     1
@@ -60,6 +62,7 @@ struct m_dev {
 	int dev_type;
 	int spec_type;
 	void *driver_data;
+	int read_continue_flag;
 	int wait_rx_complete;
 	int rx_complete_flag;
 	wait_queue_head_t rx_wait_q;
@@ -102,6 +105,12 @@ struct mbt_dev {
 	atomic_t promisc;
 };
 
+struct debug_dev {
+	/** maybe could add some private member later */
+	char name[DEV_NAME_LEN];
+	unsigned long flags;
+};
+
 /** This function frees m_dev allocation */
 void free_m_dev(struct m_dev *m_dev);
 
diff --git a/drivers/bluetooth/mbtex_8997/bt/mbt_char.c b/drivers/bluetooth/mbtex_8997/bt/mbt_char.c
index 9934b7df71c1..d63748213bad 100755
--- a/drivers/bluetooth/mbtex_8997/bt/mbt_char.c
+++ b/drivers/bluetooth/mbtex_8997/bt/mbt_char.c
@@ -81,7 +81,7 @@ chardev_put(struct char_dev *dev)
 	}
 }
 
-#if 0
+#if 1
 /**
  *	@brief Changes permissions of the dev
  *
@@ -510,6 +510,7 @@ chardev_open(struct inode *inode, struct file *filp)
 	struct m_dev *m_dev = NULL;
 	struct char_dev *cdev = NULL;
 	struct list_head *p = NULL;
+	PRINTM(ERROR, "mbtchar charddev_open function called\n");
 	ENTER();
 
 	list_for_each(p, &char_dev_list) {
@@ -534,11 +535,14 @@ chardev_open(struct inode *inode, struct file *filp)
 	mdev_req_lock(m_dev);
 #if LINUX_VERSION_CODE > KERNEL_VERSION(3, 7, 0)
 	if (test_bit(HCI_UP, &m_dev->flags)) {
+		PRINTM(ERROR, "mbtchar: Already HCI_UP\n");
+		ret = -EALREADY;
 		atomic_inc(&m_dev->extra_cnt);
 		goto done;
 	}
 #endif
 	if (m_dev->open(m_dev)) {
+		PRINTM(ERROR, "mbtchar: m_dev->open error\n");
 		ret = -EIO;
 		goto done;
 	}
@@ -684,11 +688,19 @@ register_char_dev(struct char_dev *dev, struct class *char_class,
 		device_create(char_class, NULL,
 			      MKDEV(mbtchar_major, dev->minor), NULL, dev_name);
 	}
+	if (dev->dev_type == DEBUG_TYPE) {
+		device_create(char_class, NULL,
+			      MKDEV(mbtchar_major, dev->minor), NULL, dev_name);
+	}
 #else
 	if ((dev->dev_type == BT_TYPE) || (dev->dev_type == BT_AMP_TYPE)) {
 		device_create(char_class, NULL,
 			      MKDEV(mbtchar_major, dev->minor), dev_name);
 	}
+	if (dev->dev_type == DEBUG_TYPE) {
+		device_create(char_class, NULL,
+			      MKDEV(mbtchar_major, dev->minor), dev_name);
+	}
 #endif
 	PRINTM(INFO, "register char dev=%s\n", dev_name);
 
diff --git a/drivers/bluetooth/mbtex_8997/bt/mbt_char.h b/drivers/bluetooth/mbtex_8997/bt/mbt_char.h
index b9e9f9ff0e38..b6724906cf11 100755
--- a/drivers/bluetooth/mbtex_8997/bt/mbt_char.h
+++ b/drivers/bluetooth/mbtex_8997/bt/mbt_char.h
@@ -32,8 +32,10 @@
 #define MBTCHAR_MAJOR_NUM            (0)
 
 /** Interface specific macros */
+#define MBTCHAR_MINOR_BASE           (0)
 #define FMCHAR_MINOR_BASE            (10)
 #define NFCCHAR_MINOR_BASE           (20)
+#define DEBUGCHAR_MINOR_BASE         (30)
 
 /** Declaration of char_dev struct */
 struct char_dev {
